import argparse

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∏)
from src.generator import generate_hypotheses
from src.evaluator import evaluate_resonance
from src.rl_gan import evolve_hypotheses

def main(goal: str):
    print(f"üéØ –¶–µ–ª—å: {goal}\n")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∏–ø–æ—Ç–µ–∑
    hypotheses = generate_hypotheses(goal)
    print("üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã:")
    for h in hypotheses:
        print(f"- {h}")

    # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å–æ–º
    evaluated = evaluate_resonance(hypotheses)
    print("\nüìä –û—Ü–µ–Ω–∫–∞ –≥–∏–ø–æ—Ç–µ–∑:")
    for h, score in evaluated:
        print(f"- {h} ‚Üí score: {score:.3f}")

    # –≠–≤–æ–ª—é—Ü–∏—è —Å –ø–æ–º–æ—â—å—é RL + GAN
    refined = evolve_hypotheses(evaluated)
    print("\nüî¨ –£—Ç–æ—á–Ω—ë–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã:")
    for h in refined:
        print(f"- {h}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Hybrid Resonant AI CLI Example")
    parser.add_argument("--goal", type=str, required=True, help="–¶–µ–ª—å (goal) –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    args = parser.parse_args()
    main(args.goal)
